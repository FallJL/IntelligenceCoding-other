def bfs():global depq=queue.Queue()for i in range(n):dep[i]=0dep[s]=1q.put(s)while(not q.empty()):u=q.get()e=head[u]while(e!=-1):if(a[e].w!=0 and dep[a[e].to]==0):dep[a[e].to]=dep[u]+1q.put(a[e].to)e=a[e].nxtreturn dep[t]!=0
def __init__(self,to,nxt,w):self.to=toself.nxt=nxtself.w=w
def dfs(u,f):global aif(u==t):return f;res=0e=cur[u]while(e!=-1):if(a[e].w!=0 and dep[a[e].to]==dep[u]+1):d=dfs(a[e].to,min(a[e].w,f))a[e].w-=da[e^1].w+=df-=dres+=dif(f==0):breakcur[u]=e=a[e].nxtif(res==0):dep[u]=0return res
def link(u,v,w):global a,head,cnta.append(edge(v,head[u],w))head[u]=cntcnt+=1a.append(edge(u,head[v],0))head[v]=cntcnt+=1
import queueN=105M=5005INF=2**30class edge:def __init__(self,to,nxt,w):self.to=toself.nxt=nxtself.w=wa=[]head=[-1 for i in range(N)]cnt=0cur=[-1 for i in range(N)]dep=[0 for i in range(N)]def link(u,v,w):global a,head,cnta.append(edge(v,head[u],w))head[u]=cntcnt+=1a.append(edge(u,head[v],0))head[v]=cntcnt+=1def bfs():global depq=queue.Queue()for i in range(n):dep[i]=0dep[s]=1q.put(s)while(not q.empty()):u=q.get()e=head[u]while(e!=-1):if(a[e].w!=0 and dep[a[e].to]==0):dep[a[e].to]=dep[u]+1q.put(a[e].to)e=a[e].nxtreturn dep[t]!=0def dfs(u,f):global aif(u==t):return f;res=0e=cur[u]while(e!=-1):if(a[e].w!=0 and dep[a[e].to]==dep[u]+1):d=dfs(a[e].to,min(a[e].w,f))a[e].w-=da[e^1].w+=df-=dres+=dif(f==0):breakcur[u]=e=a[e].nxtif(res==0):dep[u]=0return resn,m,s,t=map(int,input().split())s-=1t-=1for i in range(m):x,y,z=map(int,input().split())x-=1y-=1link(x,y,z)ans=0while(bfs()):for i in range(n):cur[i]=head[i]ans+=dfs(s,INF)print(ans)